/**
 * M√≥dulo de T√©cnicos para o Bot WhatsApp
 * 
 * Este m√≥dulo implementa as funcionalidades espec√≠ficas para t√©cnicos, incluindo:
 * - Verifica√ß√£o de t√©cnicos no sistema
 * - Comandos espec√≠ficos para t√©cnicos
 * - Sistema de atribui√ß√£o e gerenciamento de ordens de servi√ßo
 * - Integra√ß√£o com Google Maps para navega√ß√£o e c√°lculo de rotas
 * - Sistema de notifica√ß√£o de chegada ao local
 * - Fluxo p√≥s-chegada com coleta de fotos e registros
 */

const { MessageMedia, Buttons } = require("whatsapp-web.js");
const fs = require("fs");
const path = require("path");
const { Client: GoogleMapsClient } = require('@googlemaps/google-maps-services-js');

// Configura√ß√£o do cliente Google Maps
const googleMapsClient = new GoogleMapsClient({});
const GOOGLE_MAPS_API_KEY = "AIzaSyD7JwL-0YJsLmBQDl7Jx4dmSqRrSfRkQA0"; // Chave API configurada

/**
 * Verifica se o n√∫mero √© de um t√©cnico registrado
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {String} whatsappNumber - N√∫mero do WhatsApp
 * @returns {Promise<Object|null>} - Dados do t√©cnico ou null se n√£o for t√©cnico
 */
async function checkIfTechnician(conn, whatsappNumber) {
    try {
        const result = await conn.query(
            "SELECT id, name, status FROM technicians WHERE whatsapp_number = ?",
            [whatsappNumber]
        );
        
        if (result.length > 0) {
            return result[0];
        }
        return null;
    } catch (error) {
        console.error("[ERRO DB] Falha ao verificar t√©cnico:", error);
        return null;
    }
}

/**
 * Atualiza o status do t√©cnico no banco de dados
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {Number} technicianId - ID do t√©cnico
 * @param {String} status - Novo status (available, busy, offline)
 * @param {String} currentLocation - Localiza√ß√£o atual (opcional)
 */
async function updateTechnicianStatus(conn, technicianId, status, currentLocation = null) {
    try {
        if (currentLocation) {
            await conn.query(
                "UPDATE technicians SET status = ?, current_location = ?, last_activity = NOW() WHERE id = ?",
                [status, currentLocation, technicianId]
            );
        } else {
            await conn.query(
                "UPDATE technicians SET status = ?, last_activity = NOW() WHERE id = ?",
                [status, technicianId]
            );
        }
        console.log(`[T√âCNICO] Status do t√©cnico ${technicianId} atualizado para ${status}`);
    } catch (error) {
        console.error("[ERRO DB] Falha ao atualizar status do t√©cnico:", error);
    }
}

/**
 * Busca ordens de servi√ßo atribu√≠das ao t√©cnico
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {Number} technicianId - ID do t√©cnico
 * @returns {Promise<Array>} - Lista de ordens de servi√ßo
 */
async function getTechnicianServiceOrders(conn, technicianId) {
    try {
        const orders = await conn.query(
            `SELECT so.id, so.appointment_id, so.status, so.arrival_time, so.notes,
            a.specialty, a.problem_description, a.scheduled_datetime, a.visit_fee,
            c.name as client_name, c.whatsapp_number, c.address
            FROM service_orders so
            JOIN appointments a ON so.appointment_id = a.id
            JOIN clients c ON a.client_id = c.id
            WHERE so.technician_id = ? AND so.status != 'completed' AND so.status != 'cancelled'
            ORDER BY a.scheduled_datetime ASC`,
            [technicianId]
        );
        
        return orders;
    } catch (error) {
        console.error("[ERRO DB] Falha ao buscar ordens de servi√ßo:", error);
        return [];
    }
}

/**
 * Cria bot√µes para a√ß√µes do t√©cnico
 * @param {Object} serviceOrder - Dados da ordem de servi√ßo
 * @returns {Object} - Bot√µes para o t√©cnico
 */
function createTechnicianButtons(serviceOrder) {
    let buttons = [];
    
    switch (serviceOrder.status) {
        case 'assigned':
            buttons = [
                {id: 'navigate', body: 'üó∫Ô∏è Navegar'},
                {id: 'reject', body: '‚ùå Rejeitar'}
            ];
            break;
        case 'en_route':
            buttons = [
                {id: 'arrived', body: 'üè† Cheguei no Local'},
                {id: 'navigate', body: 'üó∫Ô∏è Navegar Novamente'}
            ];
            break;
        case 'arrived':
            buttons = [
                {id: 'start_service', body: 'üîß Iniciar Servi√ßo'},
                {id: 'client_absent', body: '‚ùì Cliente Ausente'}
            ];
            break;
        case 'in_progress':
            buttons = [
                {id: 'complete_service', body: '‚úÖ Finalizar Servi√ßo'},
                {id: 'upload_photos', body: 'üì∑ Enviar Fotos'}
            ];
            break;
    }
    
    return new Buttons('Selecione uma a√ß√£o:', buttons, 'Ordem de Servi√ßo #' + serviceOrder.id);
}

/**
 * Calcula rota e tempo estimado usando Google Maps
 * @param {String} origin - Endere√ßo de origem
 * @param {String} destination - Endere√ßo de destino
 * @returns {Promise<Object>} - Dados da rota
 */
async function calculateRoute(origin, destination) {
    try {
        const response = await googleMapsClient.directions({
            params: {
                origin: origin,
                destination: destination,
                key: GOOGLE_MAPS_API_KEY,
                alternatives: true,
                traffic_model: 'best_guess',
                departure_time: 'now'
            }
        });
        
        if (response.data.status === 'OK' && response.data.routes.length > 0) {
            const route = response.data.routes[0];
            const leg = route.legs[0];
            
            // Extrair pontos para visualiza√ß√£o no mapa
            const polyline = route.overview_polyline.points;
            
            // Calcular ETA (Estimated Time of Arrival)
            const now = new Date();
            const etaMs = now.getTime() + leg.duration_in_traffic?.value * 1000 || leg.duration.value * 1000;
            const eta = new Date(etaMs);
            const etaFormatted = eta.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
            
            return {
                distance: leg.distance.text,
                duration: leg.duration_in_traffic?.text || leg.duration.text,
                durationValue: leg.duration_in_traffic?.value || leg.duration.value,
                startAddress: leg.start_address,
                endAddress: leg.end_address,
                eta: etaFormatted,
                steps: leg.steps.map(step => ({
                    instruction: step.html_instructions.replace(/<[^>]*>/g, ' '),
                    distance: step.distance.text,
                    duration: step.duration.text
                })),
                polyline: polyline,
                mapUrl: `https://www.google.com/maps/dir/?api=1&origin=${encodeURIComponent(origin)}&destination=${encodeURIComponent(destination)}&travelmode=driving`
            };
        }
        
        throw new Error('N√£o foi poss√≠vel calcular a rota');
    } catch (error) {
        console.error("[ERRO MAPS] Falha ao calcular rota:", error);
        return {
            error: true,
            message: 'N√£o foi poss√≠vel calcular a rota',
            mapUrl: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(destination)}`
        };
    }
}

/**
 * Notifica o cliente sobre o deslocamento do t√©cnico
 * @param {Object} client - Cliente WhatsApp
 * @param {Object} serviceOrder - Dados da ordem de servi√ßo
 * @param {Object} routeInfo - Informa√ß√µes da rota
 * @returns {Promise<void>}
 */
async function notifyClientAboutTechnician(client, serviceOrder, routeInfo) {
    try {
        const clientId = `${serviceOrder.whatsapp_number}@c.us`;
        
        // Criar mensagem com informa√ß√µes de deslocamento
        let message = `*Atualiza√ß√£o sobre seu agendamento*\n\n`;
        message += `Ol√° ${serviceOrder.client_name}! O t√©cnico est√° a caminho do seu endere√ßo.\n\n`;
        message += `üöó *Dist√¢ncia:* ${routeInfo.distance}\n`;
        message += `‚è±Ô∏è *Tempo estimado:* ${routeInfo.duration}\n`;
        message += `üïí *Hor√°rio previsto de chegada:* ${routeInfo.eta}\n\n`;
        message += `Voc√™ receber√° uma notifica√ß√£o quando o t√©cnico chegar ao local.`;
        
        // Enviar mensagem para o cliente
        await client.sendMessage(clientId, message);
        
        console.log(`[NOTIFICA√á√ÉO] Cliente ${serviceOrder.client_name} notificado sobre deslocamento do t√©cnico`);
    } catch (error) {
        console.error("[ERRO] Falha ao notificar cliente:", error);
    }
}

/**
 * Salva foto enviada pelo t√©cnico
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {Number} serviceOrderId - ID da ordem de servi√ßo
 * @param {String} photoType - Tipo da foto (before, packaging, after)
 * @param {Object} media - Objeto MessageMedia com a foto
 * @param {String} description - Descri√ß√£o da foto
 * @returns {Promise<String>} - Caminho da foto salva
 */
async function saveTechnicianPhoto(conn, serviceOrderId, photoType, media, description = '') {
    try {
        // Criar diret√≥rio para fotos se n√£o existir
        const uploadDir = path.join(__dirname, 'uploads', 'service_photos', serviceOrderId.toString());
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        
        // Gerar nome de arquivo √∫nico
        const timestamp = new Date().getTime();
        const fileName = `${photoType}_${timestamp}.${media.mimetype.split('/')[1]}`;
        const filePath = path.join(uploadDir, fileName);
        
        // Salvar arquivo
        const fileData = media.data.replace(/^data:image\/\w+;base64,/, '');
        fs.writeFileSync(filePath, Buffer.from(fileData, 'base64'));
        
        // Salvar refer√™ncia no banco de dados
        const relativePath = path.join('uploads', 'service_photos', serviceOrderId.toString(), fileName);
        await conn.query(
            "INSERT INTO service_photos (service_order_id, photo_type, photo_path, description) VALUES (?, ?, ?, ?)",
            [serviceOrderId, photoType, relativePath, description]
        );
        
        console.log(`[FOTO] Foto do tipo ${photoType} salva para ordem de servi√ßo ${serviceOrderId}`);
        return relativePath;
    } catch (error) {
        console.error("[ERRO] Falha ao salvar foto:", error);
        throw error;
    }
}

/**
 * Processa comandos espec√≠ficos de t√©cnicos
 * @param {Object} client - Cliente WhatsApp
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {String} senderId - ID do remetente
 * @param {String} senderNumber - N√∫mero do remetente
 * @param {String} command - Comando recebido
 * @param {String} params - Par√¢metros do comando
 * @returns {Promise<Boolean>} - True se o comando foi processado
 */
async function processTechnicianCommand(client, conn, senderId, senderNumber, command, params) {
    // Verificar se √© um t√©cnico
    const technician = await checkIfTechnician(conn, senderNumber);
    if (!technician) {
        return false; // N√£o √© um t√©cnico
    }
    
    console.log(`[T√âCNICO] Comando recebido de ${technician.name}: ${command} ${params}`);
    
    switch (command) {
        case '/status':
            // Atualizar status do t√©cnico
            const newStatus = params.trim().toLowerCase();
            if (['available', 'busy', 'offline'].includes(newStatus)) {
                await updateTechnicianStatus(conn, technician.id, newStatus);
                await client.sendMessage(senderId, `‚úÖ Seu status foi atualizado para: *${newStatus}*`);
            } else {
                await client.sendMessage(
                    senderId, 
                    "Status inv√°lido. Use:\n/status available\n/status busy\n/status offline"
                );
            }
            return true;
            
        case '/ordens':
            // Listar ordens de servi√ßo atribu√≠das ao t√©cnico
            const orders = await getTechnicianServiceOrders(conn, technician.id);
            
            if (orders.length === 0) {
                await client.sendMessage(senderId, "Voc√™ n√£o possui ordens de servi√ßo atribu√≠das no momento.");
                return true;
            }
            
            let ordersList = "*Suas Ordens de Servi√ßo:*\n\n";
            for (const order of orders) {
                const scheduledDate = new Date(order.scheduled_datetime).toLocaleDateString('pt-BR');
                const scheduledTime = new Date(order.scheduled_datetime).toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
                
                ordersList += `*OS #${order.id}* - ${order.status.toUpperCase()}\n`;
                ordersList += `Cliente: ${order.client_name}\n`;
                ordersList += `Servi√ßo: ${order.specialty}\n`;
                ordersList += `Data: ${scheduledDate} √†s ${scheduledTime}\n`;
                ordersList += `Endere√ßo: ${order.address}\n\n`;
            }
            
            ordersList += "Para ver detalhes de uma ordem espec√≠fica, digite:\n/ordem [n√∫mero da OS]";
            
            await client.sendMessage(senderId, ordersList);
            return true;
            
        case '/ordem':
            // Ver detalhes de uma ordem espec√≠fica
            const orderId = parseInt(params.trim());
            if (isNaN(orderId)) {
                await client.sendMessage(senderId, "Por favor, forne√ßa o n√∫mero da ordem de servi√ßo. Exemplo: /ordem 123");
                return true;
            }
            
            try {
                const orderDetails = await conn.query(
                    `SELECT so.id, so.appointment_id, so.status, so.arrival_time, so.notes,
                    a.specialty, a.problem_description, a.scheduled_datetime, a.visit_fee,
                    c.name as client_name, c.whatsapp_number, c.address
                    FROM service_orders so
                    JOIN appointments a ON so.appointment_id = a.id
                    JOIN clients c ON a.client_id = c.id
                    WHERE so.id = ? AND so.technician_id = ?`,
                    [orderId, technician.id]
                );
                
                if (orderDetails.length === 0) {
                    await client.sendMessage(senderId, `Ordem de servi√ßo #${orderId} n√£o encontrada ou n√£o est√° atribu√≠da a voc√™.`);
                    return true;
                }
                
                const order = orderDetails[0];
                const scheduledDate = new Date(order.scheduled_datetime).toLocaleDateString('pt-BR');
                const scheduledTime = new Date(order.scheduled_datetime).toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
                
                // Buscar fotos associadas √† ordem
                const photos = await conn.query(
                    "SELECT photo_type, COUNT(*) as count FROM service_photos WHERE service_order_id = ? GROUP BY photo_type",
                    [order.id]
                );
                
                let photosInfo = "";
                if (photos.length > 0) {
                    photosInfo = "\n*Fotos:*\n";
                    for (const photo of photos) {
                        photosInfo += `- ${photo.photo_type}: ${photo.count} foto(s)\n`;
                    }
                }
                
                const orderMessage = 
                    `*Detalhes da Ordem de Servi√ßo #${order.id}*\n\n` +
                    `*Status:* ${order.status.toUpperCase()}\n` +
                    `*Cliente:* ${order.client_name}\n` +
                    `*Telefone:* ${order.whatsapp_number}\n` +
                    `*Servi√ßo:* ${order.specialty}\n` +
                    `*Descri√ß√£o:* ${order.problem_description || 'N√£o informada'}\n` +
                    `*Data:* ${scheduledDate} √†s ${scheduledTime}\n` +
                    `*Endere√ßo:* ${order.address}\n` +
                    `*Valor da Visita:* R$ ${order.visit_fee.toFixed(2)}` +
                    photosInfo;
                
                await client.sendMessage(senderId, orderMessage);
                
                // Enviar bot√µes de a√ß√£o conforme o status da ordem
                const buttons = createTechnicianButtons(order);
                await client.sendMessage(senderId, buttons);
                
            } catch (error) {
                console.error("[ERRO DB] Falha ao buscar detalhes da ordem:", error);
                await client.sendMessage(senderId, "Ocorreu um erro ao buscar os detalhes da ordem de servi√ßo. Tente novamente mais tarde.");
            }
            return true;
            
        case '/localizacao':
            // Atualizar localiza√ß√£o atual do t√©cnico
            const location = params.trim();
            if (location.length < 5) {
                await client.sendMessage(senderId, "Por favor, forne√ßa um endere√ßo v√°lido. Exemplo: /localizacao Rua Exemplo, 123, Cidade");
                return true;
            }
            
            await updateTechnicianStatus(conn, technician.id, technician.status, location);
            await client.sendMessage(senderId, `‚úÖ Sua localiza√ß√£o foi atualizada para: *${location}*`);
            return true;
            
        case '/ajuda':
            // Mostrar comandos dispon√≠veis para t√©cnicos
            const helpMessage = 
                "*Comandos dispon√≠veis para t√©cnicos:*\n\n" +
                "üìã */ordens* - Listar todas as suas ordens de servi√ßo\n" +
                "üîç */ordem [n√∫mero]* - Ver detalhes de uma ordem espec√≠fica\n" +
                "üö¶ */status [estado]* - Atualizar seu status (available, busy, offline)\n" +
                "üìç */localizacao* - Atualizar sua localiza√ß√£o atual\n" +
                "‚ùì */ajuda* - Mostrar esta mensagem de ajuda\n\n" +
                "*Bot√µes de a√ß√£o:*\n" +
                "üó∫Ô∏è *Navegar* - Iniciar navega√ß√£o para o endere√ßo do cliente\n" +
                "üè† *Cheguei no Local* - Notificar que voc√™ chegou ao local\n" +
                "üîß *Iniciar Servi√ßo* - Come√ßar o atendimento\n" +
                "üì∑ *Enviar Fotos* - Enviar fotos do servi√ßo\n" +
                "‚úÖ *Finalizar Servi√ßo* - Concluir a ordem de servi√ßo";
                
            await client.sendMessage(senderId, helpMessage);
            return true;
            
        default:
            return false; // Comando n√£o reconhecido
    }
}

/**
 * Processa bot√µes de a√ß√£o do t√©cnico
 * @param {Object} client - Cliente WhatsApp
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {String} senderId - ID do remetente
 * @param {String} senderNumber - N√∫mero do remetente
 * @param {Object} msg - Mensagem recebida
 * @param {Object} userState - Estado da conversa do usu√°rio
 * @returns {Promise<Boolean>} - True se o bot√£o foi processado
 */
async function processTechnicianButton(client, conn, senderId, senderNumber, msg, userState) {
    // Verificar se √© um t√©cnico
    const technician = await checkIfTechnician(conn, senderNumber);
    if (!technician) {
        return false; // N√£o √© um t√©cnico
    }
    
    // Verificar se √© um bot√£o de t√©cnico
    const buttonId = msg.selectedButtonId;
    if (!buttonId) {
        return false;
    }
    
    console.log(`[T√âCNICO] Bot√£o pressionado por ${technician.name}: ${buttonId}`);
    
    // Extrair ID da ordem de servi√ßo do t√≠tulo do bot√£o
    const titleMatch = msg.body.match(/Ordem de Servi√ßo #(\d+)/);
    if (!titleMatch) {
        return false;
    }
    
    const serviceOrderId = parseInt(titleMatch[1]);
    
    try {
        // Buscar detalhes da ordem de servi√ßo
        const orderDetails = await conn.query(
            `SELECT so.id, so.appointment_id, so.status, so.technician_id, so.arrival_time, so.notes,
            a.specialty, a.problem_description, a.scheduled_datetime, a.visit_fee,
            c.id as client_id, c.name as client_name, c.whatsapp_number, c.address
            FROM service_orders so
            JOIN appointments a ON so.appointment_id = a.id
            JOIN clients c ON a.client_id = c.id
            WHERE so.id = ?`,
            [serviceOrderId]
        );
        
        if (orderDetails.length === 0) {
            await client.sendMessage(senderId, `Ordem de servi√ßo #${serviceOrderId} n√£o encontrada.`);
            return true;
        }
        
        const order = orderDetails[0];
        
        // Verificar se a ordem pertence a este t√©cnico
        if (order.technician_id !== technician.id) {
            await client.sendMessage(senderId, `Ordem de servi√ßo #${serviceOrderId} n√£o est√° atribu√≠da a voc√™.`);
            return true;
        }
        
        // Processar a√ß√£o do bot√£o
        switch (buttonId) {
            case 'navigate':
                // Iniciar navega√ß√£o para o endere√ßo do cliente
                const technicianLocation = await conn.query(
                    "SELECT current_location FROM technicians WHERE id = ?",
                    [technician.id]
                );
                
                let origin = technicianLocation[0]?.current_location;
                if (!origin) {
                    // Se n√£o tiver localiza√ß√£o atual, pedir para informar
                    if (!userState[senderId]) {
                        userState[senderId] = { state: "awaiting_technician_location", data: {} };
                    } else {
                        userState[senderId].state = "awaiting_technician_location";
                    }
                    userState[senderId].data = { serviceOrderId: serviceOrderId };
                    
                    await client.sendMessage(senderId, "Para calcular a rota, preciso da sua localiza√ß√£o atual. Por favor, informe seu endere√ßo atual:");
                    return true;
                }
                
                // Calcular rota
                const destination = order.address;
                const routeInfo = await calculateRoute(origin, destination);
                
                if (routeInfo.error) {
                    await client.sendMessage(senderId, `N√£o foi poss√≠vel calcular a rota: ${routeInfo.message}\n\nVoc√™ pode acessar o mapa diretamente: ${routeInfo.mapUrl}`);
                    return true;
                }
                
                // Atualizar status da ordem para "em rota"
                if (order.status === 'assigned') {
                    await conn.query(
                        "UPDATE service_orders SET status = 'en_route', departure_time = NOW() WHERE id = ?",
                        [serviceOrderId]
                    );
                    
                    // Notificar cliente sobre o deslocamento do t√©cnico
                    await notifyClientAboutTechnician(client, order, routeInfo);
                }
                
                // Enviar informa√ß√µes da rota para o t√©cnico
                let routeMessage = `*Rota para ${order.client_name}*\n\n`;
                routeMessage += `üìç *Origem:* ${routeInfo.startAddress}\n`;
                routeMessage += `üè† *Destino:* ${routeInfo.endAddress}\n`;
                routeMessage += `üöó *Dist√¢ncia:* ${routeInfo.distance}\n`;
                routeMessage += `‚è±Ô∏è *Tempo estimado:* ${routeInfo.duration}\n`;
                routeMessage += `üïí *Hor√°rio previsto de chegada:* ${routeInfo.eta}\n\n`;
                
                // Adicionar instru√ß√µes de navega√ß√£o
                routeMessage += "*Instru√ß√µes de navega√ß√£o:*\n";
                routeInfo.steps.forEach((step, index) => {
                    if (index < 5) { // Limitar a 5 passos para n√£o sobrecarregar a mensagem
                        routeMessage += `${index + 1}. ${step.instruction} (${step.distance})\n`;
                    }
                });
                
                if (routeInfo.steps.length > 5) {
                    routeMessage += `... e mais ${routeInfo.steps.length - 5} passos\n`;
                }
                
                routeMessage += `\nPara iniciar a navega√ß√£o no Google Maps, clique no link abaixo:\n${routeInfo.mapUrl}`;
                
                await client.sendMessage(senderId, routeMessage);
                
                // Enviar bot√µes atualizados
                const updatedButtons = createTechnicianButtons({...order, status: 'en_route'});
                await client.sendMessage(senderId, updatedButtons);
                
                return true;
                
            case 'arrived':
                // Notificar chegada ao local
                await conn.query(
                    "UPDATE service_orders SET status = 'arrived', arrival_time = NOW() WHERE id = ?",
                    [serviceOrderId]
                );
                
                // Notificar cliente sobre a chegada do t√©cnico
                const clientId = `${order.whatsapp_number}@c.us`;
                
                // Configurar bot√µes de confirma√ß√£o para o cliente
                const confirmButtons = new Buttons(
                    `O t√©cnico chegou ao seu endere√ßo para realizar o servi√ßo de ${order.specialty}. Por favor, confirme sua presen√ßa:`,
                    [
                        {id: 'confirm_presence', body: '‚úÖ Confirmar Presen√ßa'},
                        {id: 'reschedule', body: 'üìÖ Reagendar'}
                    ],
                    `Ordem de Servi√ßo #${serviceOrderId}`
                );
                
                // Enviar notifica√ß√£o com bot√µes para o cliente
                await client.sendMessage(clientId, confirmButtons);
                
                // Configurar estado do cliente para aguardar confirma√ß√£o
                if (!userState[clientId]) {
                    userState[clientId] = { state: "awaiting_arrival_confirmation", data: {} };
                } else {
                    userState[clientId].state = "awaiting_arrival_confirmation";
                }
                userState[clientId].data = { 
                    serviceOrderId: serviceOrderId,
                    technicianId: technician.id,
                    technicianName: technician.name
                };
                
                // Informar t√©cnico que o cliente foi notificado
                await client.sendMessage(
                    senderId,
                    `‚úÖ Cliente ${order.client_name} foi notificado sobre sua chegada. Aguarde a confirma√ß√£o de presen√ßa.`
                );
                
                // Enviar bot√µes atualizados
                const arrivedButtons = createTechnicianButtons({...order, status: 'arrived'});
                await client.sendMessage(senderId, arrivedButtons);
                
                return true;
                
            case 'start_service':
                // Iniciar servi√ßo
                await conn.query(
                    "UPDATE service_orders SET status = 'in_progress', service_start_time = NOW() WHERE id = ?",
                    [serviceOrderId]
                );
                
                // Notificar cliente que o servi√ßo foi iniciado
                const clientStartId = `${order.whatsapp_number}@c.us`;
                await client.sendMessage(
                    clientStartId,
                    `O t√©cnico iniciou o servi√ßo de ${order.specialty}. Qualquer d√∫vida, entre em contato conosco.`
                );
                
                // Solicitar fotos do "antes"
                await client.sendMessage(
                    senderId,
                    `‚úÖ Servi√ßo iniciado! Por favor, tire fotos do local/equipamento *antes* de iniciar o trabalho.`
                );
                
                // Configurar estado do t√©cnico para envio de fotos
                if (!userState[senderId]) {
                    userState[senderId] = { state: "awaiting_technician_photos", data: {} };
                } else {
                    userState[senderId].state = "awaiting_technician_photos";
                }
                userState[senderId].data = { 
                    serviceOrderId: serviceOrderId,
                    photoType: "before",
                    photoCount: 0
                };
                
                return true;
                
            case 'upload_photos':
                // Solicitar tipo de foto
                const photoOptions = new Buttons(
                    `Que tipo de foto voc√™ deseja enviar para a OS #${serviceOrderId}?`,
                    [
                        {id: 'photo_before', body: 'üì∏ Antes do Servi√ßo'},
                        {id: 'photo_packaging', body: 'üì¶ Embalagens/Pe√ßas'},
                        {id: 'photo_after', body: '‚úÖ Depois do Servi√ßo'}
                    ],
                    `Fotos da Ordem de Servi√ßo #${serviceOrderId}`
                );
                
                await client.sendMessage(senderId, photoOptions);
                return true;
                
            case 'photo_before':
            case 'photo_packaging':
            case 'photo_after':
                // Configurar estado para receber fotos
                const photoType = buttonId.replace('photo_', '');
                
                if (!userState[senderId]) {
                    userState[senderId] = { state: "awaiting_technician_photos", data: {} };
                } else {
                    userState[senderId].state = "awaiting_technician_photos";
                }
                userState[senderId].data = { 
                    serviceOrderId: serviceOrderId,
                    photoType: photoType,
                    photoCount: 0
                };
                
                await client.sendMessage(
                    senderId,
                    `Envie as fotos do tipo "${photoType}". Quando terminar, digite "pronto".`
                );
                return true;
                
            case 'complete_service':
                // Verificar se h√° fotos do tipo "after"
                const afterPhotos = await conn.query(
                    "SELECT COUNT(*) as count FROM service_photos WHERE service_order_id = ? AND photo_type = 'after'",
                    [serviceOrderId]
                );
                
                if (afterPhotos[0].count === 0) {
                    // Solicitar fotos do "depois" antes de finalizar
                    await client.sendMessage(
                        senderId,
                        `‚ö†Ô∏è Antes de finalizar o servi√ßo, √© necess√°rio enviar fotos do trabalho conclu√≠do. Por favor, use o bot√£o "Enviar Fotos" e selecione "Depois do Servi√ßo".`
                    );
                    return true;
                }
                
                // Solicitar descri√ß√£o do servi√ßo realizado
                if (!userState[senderId]) {
                    userState[senderId] = { state: "awaiting_service_description", data: {} };
                } else {
                    userState[senderId].state = "awaiting_service_description";
                }
                userState[senderId].data = { serviceOrderId: serviceOrderId };
                
                await client.sendMessage(
                    senderId,
                    `Por favor, descreva o servi√ßo realizado e os materiais utilizados:`
                );
                return true;
                
            case 'reject':
                // Rejeitar ordem de servi√ßo
                if (!userState[senderId]) {
                    userState[senderId] = { state: "awaiting_rejection_reason", data: {} };
                } else {
                    userState[senderId].state = "awaiting_rejection_reason";
                }
                userState[senderId].data = { serviceOrderId: serviceOrderId };
                
                await client.sendMessage(
                    senderId,
                    `Por favor, informe o motivo da rejei√ß√£o desta ordem de servi√ßo:`
                );
                return true;
                
            case 'client_absent':
                // Cliente ausente
                await conn.query(
                    "UPDATE service_orders SET status = 'client_absent', notes = CONCAT(IFNULL(notes, ''), '\nCliente ausente em ', NOW()) WHERE id = ?",
                    [serviceOrderId]
                );
                
                // Notificar cliente sobre a aus√™ncia
                const absentClientId = `${order.whatsapp_number}@c.us`;
                await client.sendMessage(
                    absentClientId,
                    `Nosso t√©cnico esteve no local agendado, mas n√£o encontrou ningu√©m. Por favor, entre em contato para reagendar o servi√ßo.`
                );
                
                // Informar t√©cnico
                await client.sendMessage(
                    senderId,
                    `‚úÖ Registramos que o cliente estava ausente. A ordem de servi√ßo foi marcada como "cliente ausente" e o cliente foi notificado.`
                );
                
                // Perguntar se deseja reagendar
                const rescheduleButtons = new Buttons(
                    `Deseja reagendar esta visita para outro dia?`,
                    [
                        {id: 'reschedule_yes', body: '‚úÖ Sim, Reagendar'},
                        {id: 'reschedule_no', body: '‚ùå N√£o, Cancelar OS'}
                    ],
                    `Reagendamento da OS #${serviceOrderId}`
                );
                
                await client.sendMessage(senderId, rescheduleButtons);
                return true;
                
            default:
                return false; // Bot√£o n√£o reconhecido
        }
    } catch (error) {
        console.error("[ERRO DB] Falha ao processar bot√£o de t√©cnico:", error);
        await client.sendMessage(senderId, "Ocorreu um erro ao processar sua a√ß√£o. Tente novamente mais tarde.");
        return true;
    }
}

/**
 * Processa estados espec√≠ficos de t√©cnicos
 * @param {Object} client - Cliente WhatsApp
 * @param {Object} conn - Conex√£o com o banco de dados
 * @param {String} senderId - ID do remetente
 * @param {String} senderNumber - N√∫mero do remetente
 * @param {Object} msg - Mensagem recebida
 * @param {Object} stateInfo - Informa√ß√µes do estado atual
 * @returns {Promise<Boolean>} - True se o estado foi processado
 */
async function processTechnicianState(client, conn, senderId, senderNumber, msg, stateInfo) {
    // Verificar se √© um t√©cnico
    const technician = await checkIfTechnician(conn, senderNumber);
    if (!technician) {
        return false; // N√£o √© um t√©cnico
    }
    
    // Verificar se √© um estado de t√©cnico
    if (!stateInfo.state.startsWith('awaiting_technician') && 
        !stateInfo.state === 'awaiting_service_description' && 
        !stateInfo.state === 'awaiting_rejection_reason') {
        return false;
    }
    
    console.log(`[T√âCNICO] Processando estado ${stateInfo.state} para ${technician.name}`);
    
    switch (stateInfo.state) {
        case 'awaiting_technician_location':
            // T√©cnico informando sua localiza√ß√£o atual
            const location = msg.body.trim();
            if (location.length < 5) {
                await client.sendMessage(senderId, "Por favor, forne√ßa um endere√ßo v√°lido.");
                return true;
            }
            
            // Atualizar localiza√ß√£o do t√©cnico
            await updateTechnicianStatus(conn, technician.id, technician.status, location);
            
            // Buscar detalhes da ordem de servi√ßo
            const serviceOrderId = stateInfo.data.serviceOrderId;
            const orderDetails = await conn.query(
                `SELECT so.id, so.status, c.name as client_name, c.address
                FROM service_orders so
                JOIN appointments a ON so.appointment_id = a.id
                JOIN clients c ON a.client_id = c.id
                WHERE so.id = ?`,
                [serviceOrderId]
            );
            
            if (orderDetails.length === 0) {
                await client.sendMessage(senderId, `Ordem de servi√ßo #${serviceOrderId} n√£o encontrada.`);
                delete stateInfo.state;
                return true;
            }
            
            const order = orderDetails[0];
            
            // Calcular rota
            const routeInfo = await calculateRoute(location, order.address);
            
            if (routeInfo.error) {
                await client.sendMessage(senderId, `N√£o foi poss√≠vel calcular a rota: ${routeInfo.message}\n\nVoc√™ pode acessar o mapa diretamente: ${routeInfo.mapUrl}`);
                delete stateInfo.state;
                return true;
            }
            
            // Atualizar status da ordem para "em rota" se necess√°rio
            if (order.status === 'assigned') {
                await conn.query(
                    "UPDATE service_orders SET status = 'en_route', departure_time = NOW() WHERE id = ?",
                    [serviceOrderId]
                );
                
                // Notificar cliente sobre o deslocamento do t√©cnico
                await notifyClientAboutTechnician(client, order, routeInfo);
            }
            
            // Enviar informa√ß√µes da rota para o t√©cnico
            let routeMessage = `*Rota para ${order.client_name}*\n\n`;
            routeMessage += `üìç *Origem:* ${routeInfo.startAddress}\n`;
            routeMessage += `üè† *Destino:* ${routeInfo.endAddress}\n`;
            routeMessage += `üöó *Dist√¢ncia:* ${routeInfo.distance}\n`;
            routeMessage += `‚è±Ô∏è *Tempo estimado:* ${routeInfo.duration}\n`;
            routeMessage += `üïí *Hor√°rio previsto de chegada:* ${routeInfo.eta}\n\n`;
            
            // Adicionar instru√ß√µes de navega√ß√£o
            routeMessage += "*Instru√ß√µes de navega√ß√£o:*\n";
            routeInfo.steps.forEach((step, index) => {
                if (index < 5) { // Limitar a 5 passos para n√£o sobrecarregar a mensagem
                    routeMessage += `${index + 1}. ${step.instruction} (${step.distance})\n`;
                }
            });
            
            if (routeInfo.steps.length > 5) {
                routeMessage += `... e mais ${routeInfo.steps.length - 5} passos\n`;
            }
            
            routeMessage += `\nPara iniciar a navega√ß√£o no Google Maps, clique no link abaixo:\n${routeInfo.mapUrl}`;
            
            await client.sendMessage(senderId, routeMessage);
            
            // Enviar bot√µes atualizados
            const updatedButtons = createTechnicianButtons({...order, status: 'en_route'});
            await client.sendMessage(senderId, updatedButtons);
            
            // Limpar estado
            delete stateInfo.state;
            return true;
            
        case 'awaiting_technician_photos':
            // T√©cnico enviando fotos
            if (msg.type === 'image' || msg.type === 'video') {
                try {
                    const media = await msg.downloadMedia();
                    if (!media || !media.data) {
                        await client.sendMessage(senderId, "N√£o foi poss√≠vel processar esta m√≠dia. Tente novamente.");
                        return true;
                    }
                    
                    // Salvar foto
                    const serviceOrderId = stateInfo.data.serviceOrderId;
                    const photoType = stateInfo.data.photoType;
                    const photoPath = await saveTechnicianPhoto(conn, serviceOrderId, photoType, media);
                    
                    // Incrementar contador de fotos
                    stateInfo.data.photoCount = (stateInfo.data.photoCount || 0) + 1;
                    
                    await client.sendMessage(
                        senderId,
                        `‚úÖ Foto #${stateInfo.data.photoCount} do tipo "${photoType}" salva com sucesso. Voc√™ pode enviar mais fotos ou digitar "pronto" para finalizar.`
                    );
                } catch (error) {
                    console.error("[ERRO] Falha ao processar foto:", error);
                    await client.sendMessage(senderId, "Ocorreu um erro ao processar a foto. Tente novamente.");
                }
                return true;
            } else if (msg.type === 'chat') {
                const text = msg.body.trim().toLowerCase();
                if (text === 'pronto' || text === 'finalizar' || text === 'concluir') {
                    // Finalizar envio de fotos
                    const photoCount = stateInfo.data.photoCount || 0;
                    const photoType = stateInfo.data.photoType;
                    const serviceOrderId = stateInfo.data.serviceOrderId;
                    
                    if (photoCount === 0) {
                        await client.sendMessage(senderId, `Voc√™ n√£o enviou nenhuma foto do tipo "${photoType}". Por favor, envie pelo menos uma foto.`);
                        return true;
                    }
                    
                    await client.sendMessage(senderId, `‚úÖ ${photoCount} foto(s) do tipo "${photoType}" foram salvas com sucesso.`);
                    
                    // Se for foto do tipo "after", perguntar se deseja finalizar o servi√ßo
                    if (photoType === 'after') {
                        const completeButtons = new Buttons(
                            `Voc√™ enviou todas as fotos necess√°rias do servi√ßo conclu√≠do. Deseja finalizar a ordem de servi√ßo agora?`,
                            [
                                {id: 'complete_service', body: '‚úÖ Finalizar Servi√ßo'},
                                {id: 'upload_photos', body: 'üì∑ Enviar Mais Fotos'}
                            ],
                            `Ordem de Servi√ßo #${serviceOrderId}`
                        );
                        
                        await client.sendMessage(senderId, completeButtons);
                    } else {
                        // Buscar detalhes da ordem para enviar bot√µes atualizados
                        const orderDetails = await conn.query(
                            `SELECT so.id, so.status FROM service_orders so WHERE so.id = ?`,
                            [serviceOrderId]
                        );
                        
                        if (orderDetails.length > 0) {
                            const buttons = createTechnicianButtons(orderDetails[0]);
                            await client.sendMessage(senderId, buttons);
                        }
                    }
                    
                    // Limpar estado
                    delete stateInfo.state;
                } else {
                    await client.sendMessage(senderId, `Por favor, envie uma foto ou digite "pronto" para finalizar o envio de fotos.`);
                }
                return true;
            }
            return true;
            
        case 'awaiting_service_description':
            // T√©cnico informando descri√ß√£o do servi√ßo realizado
            const description = msg.body.trim();
            if (description.length < 10) {
                await client.sendMessage(senderId, "Por favor, forne√ßa uma descri√ß√£o mais detalhada do servi√ßo realizado.");
                return true;
            }
            
            const serviceOrderId = stateInfo.data.serviceOrderId;
            
            // Atualizar ordem de servi√ßo
            await conn.query(
                "UPDATE service_orders SET status = 'completed', service_end_time = NOW(), notes = ? WHERE id = ?",
                [description, serviceOrderId]
            );
            
            // Buscar detalhes da ordem
            const completedOrder = await conn.query(
                `SELECT so.id, c.name as client_name, c.whatsapp_number, a.specialty
                FROM service_orders so
                JOIN appointments a ON so.appointment_id = a.id
                JOIN clients c ON a.client_id = c.id
                WHERE so.id = ?`,
                [serviceOrderId]
            );
            
            if (completedOrder.length === 0) {
                await client.sendMessage(senderId, "N√£o foi poss√≠vel encontrar os detalhes da ordem de servi√ßo.");
                delete stateInfo.state;
                return true;
            }
            
            const order = completedOrder[0];
            
            // Notificar cliente sobre a conclus√£o do servi√ßo
            const clientId = `${order.whatsapp_number}@c.us`;
            await client.sendMessage(
                clientId,
                `‚úÖ O servi√ßo de ${order.specialty} foi conclu√≠do com sucesso!\n\n*Descri√ß√£o do servi√ßo realizado:*\n${description}\n\nAgradecemos a prefer√™ncia! Em breve voc√™ receber√° uma pesquisa de satisfa√ß√£o.`
            );
            
            // Configurar estado do cliente para avalia√ß√£o
            if (!userState[clientId]) {
                userState[clientId] = { state: "awaiting_service_rating", data: {} };
            } else {
                userState[clientId].state = "awaiting_service_rating";
            }
            userState[clientId].data = { 
                serviceOrderId: serviceOrderId,
                technicianId: technician.id
            };
            
            // Enviar pesquisa de satisfa√ß√£o para o cliente
            const ratingMessage = 
                `Como voc√™ avalia o servi√ßo realizado?\n\n` +
                `1 - ‚≠ê Muito insatisfeito\n` +
                `2 - ‚≠ê‚≠ê Insatisfeito\n` +
                `3 - ‚≠ê‚≠ê‚≠ê Neutro\n` +
                `4 - ‚≠ê‚≠ê‚≠ê‚≠ê Satisfeito\n` +
                `5 - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Muito satisfeito\n\n` +
                `Por favor, responda com um n√∫mero de 1 a 5.`;
            
            await client.sendMessage(clientId, ratingMessage);
            
            // Informar t√©cnico sobre a conclus√£o
            await client.sendMessage(
                senderId,
                `‚úÖ Ordem de servi√ßo #${serviceOrderId} finalizada com sucesso! O cliente foi notificado e receber√° uma pesquisa de satisfa√ß√£o.`
            );
            
            // Atualizar status do t√©cnico para dispon√≠vel
            await updateTechnicianStatus(conn, technician.id, 'available');
            
            // Verificar se h√° mais ordens pendentes
            const pendingOrders = await getTechnicianServiceOrders(conn, technician.id);
            
            if (pendingOrders.length > 0) {
                await client.sendMessage(
                    senderId,
                    `Voc√™ ainda tem ${pendingOrders.length} ordem(s) de servi√ßo pendente(s). Use o comando /ordens para visualiz√°-las.`
                );
            } else {
                await client.sendMessage(
                    senderId,
                    `Voc√™ n√£o possui mais ordens de servi√ßo pendentes. Bom trabalho!`
                );
            }
            
            // Limpar estado
            delete stateInfo.state;
            return true;
            
        case 'awaiting_rejection_reason':
            // T√©cnico informando motivo da rejei√ß√£o
            const reason = msg.body.trim();
            if (reason.length < 5) {
                await client.sendMessage(senderId, "Por favor, forne√ßa um motivo v√°lido para a rejei√ß√£o.");
                return true;
            }
            
            const rejectedOrderId = stateInfo.data.serviceOrderId;
            
            // Atualizar ordem de servi√ßo
            await conn.query(
                "UPDATE service_orders SET status = 'rejected', notes = ? WHERE id = ?",
                [`Rejeitado pelo t√©cnico: ${reason}`, rejectedOrderId]
            );
            
            // Buscar detalhes da ordem
            const rejectedOrder = await conn.query(
                `SELECT so.id, c.name as client_name, c.whatsapp_number, a.specialty
                FROM service_orders so
                JOIN appointments a ON so.appointment_id = a.id
                JOIN clients c ON a.client_id = c.id
                WHERE so.id = ?`,
                [rejectedOrderId]
            );
            
            if (rejectedOrder.length === 0) {
                await client.sendMessage(senderId, "N√£o foi poss√≠vel encontrar os detalhes da ordem de servi√ßo.");
                delete stateInfo.state;
                return true;
            }
            
            const rejected = rejectedOrder[0];
            
            // Notificar cliente sobre a rejei√ß√£o
            const rejectedClientId = `${rejected.whatsapp_number}@c.us`;
            await client.sendMessage(
                rejectedClientId,
                `Infelizmente, o t√©cnico n√£o poder√° realizar o servi√ßo de ${rejected.specialty} no momento. Motivo: ${reason}\n\nEntraremos em contato para reagendar.`
            );
            
            // Informar t√©cnico sobre a rejei√ß√£o
            await client.sendMessage(
                senderId,
                `‚úÖ Ordem de servi√ßo #${rejectedOrderId} foi rejeitada. O cliente foi notificado.`
            );
            
            // Atualizar status do t√©cnico para dispon√≠vel
            await updateTechnicianStatus(conn, technician.id, 'available');
            
            // Limpar estado
            delete stateInfo.state;
            return true;
            
        default:
            return false; // Estado n√£o reconhecido
    }
}

// Exportar fun√ß√µes
module.exports = {
    checkIfTechnician,
    updateTechnicianStatus,
    getTechnicianServiceOrders,
    calculateRoute,
    notifyClientAboutTechnician,
    saveTechnicianPhoto,
    processTechnicianCommand,
    processTechnicianButton,
    processTechnicianState
};
